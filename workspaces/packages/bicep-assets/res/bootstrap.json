{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "languageVersion": "2.0",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.28.1.47646",
      "templateHash": "4958285546402084068"
    }
  },
  "definitions": {
    "_1.ListKeySet": {
      "type": "object",
      "properties": {
        "keys": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/_1.SasKeySet"
          }
        }
      },
      "metadata": {
        "__bicep_imported_from!": {
          "sourceTemplate": "utils.bicep"
        }
      }
    },
    "_1.SasKeySet": {
      "type": "object",
      "properties": {
        "keyName": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      },
      "metadata": {
        "__bicep_imported_from!": {
          "sourceTemplate": "utils.bicep"
        }
      }
    }
  },
  "functions": [
    {
      "namespace": "__bicep",
      "members": {
        "connectionString": {
          "parameters": [
            {
              "type": "string",
              "name": "name"
            },
            {
              "$ref": "#/definitions/_1.ListKeySet",
              "name": "keySet"
            }
          ],
          "output": {
            "type": "string",
            "value": "[format('DefaultEndpointsProtocol=https;AccountName={0};EndpointSuffix={1};AccountKey={2}', parameters('name'), environment().suffixes.storage, parameters('keySet').keys[0].value)]"
          },
          "metadata": {
            "__bicep_imported_from!": {
              "sourceTemplate": "utils.bicep"
            }
          }
        }
      }
    }
  ],
  "parameters": {
    "resourcePrefix": {
      "type": "string",
      "minLength": 5,
      "maxLength": 20
    },
    "execZipDeploy": {
      "type": "bool"
    },
    "version": {
      "type": "string"
    },
    "baseTime": {
      "type": "string",
      "defaultValue": "[utcNow('u')]"
    }
  },
  "variables": {
    "storageAccountName": "[format('bicepassets{0}', uniqueString(resourceGroup().id, parameters('resourcePrefix')))]",
    "zipDeployContainerName": "zipdeploy",
    "zipDeployBlobName": "bicep-assets-crp.zip",
    "functionUrl": "[format('https://{0}.azurewebsites.net/api', format('{0}-fa', parameters('resourcePrefix')))]"
  },
  "resources": {
    "assetStorage": {
      "type": "Microsoft.Storage/storageAccounts",
      "apiVersion": "2023-05-01",
      "name": "[variables('storageAccountName')]",
      "location": "[resourceGroup().location]",
      "sku": {
        "name": "Standard_LRS"
      },
      "kind": "StorageV2",
      "properties": {
        "accessTier": "Cool",
        "supportsHttpsTrafficOnly": true,
        "defaultToOAuthAuthentication": true
      }
    },
    "blobServices": {
      "type": "Microsoft.Storage/storageAccounts/blobServices",
      "apiVersion": "2023-05-01",
      "name": "[format('{0}/{1}', variables('storageAccountName'), 'default')]",
      "dependsOn": [
        "assetStorage"
      ]
    },
    "zipDeployContainer": {
      "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
      "apiVersion": "2023-05-01",
      "name": "[format('{0}/{1}/{2}', variables('storageAccountName'), 'default', variables('zipDeployContainerName'))]",
      "properties": {
        "publicAccess": "None",
        "metadata": {}
      },
      "dependsOn": [
        "blobServices"
      ]
    },
    "assetContainer": {
      "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
      "apiVersion": "2023-05-01",
      "name": "[format('{0}/{1}/{2}', variables('storageAccountName'), 'default', 'assets')]",
      "properties": {
        "publicAccess": "None",
        "metadata": {}
      },
      "dependsOn": [
        "blobServices"
      ]
    },
    "hostingPlan": {
      "type": "Microsoft.Web/serverfarms",
      "apiVersion": "2023-12-01",
      "name": "[format('{0}-hp', parameters('resourcePrefix'))]",
      "location": "[resourceGroup().location]",
      "sku": {
        "name": "Y1",
        "tier": "Dynamic"
      },
      "properties": {}
    },
    "crpFunctionApp": {
      "type": "Microsoft.Web/sites",
      "apiVersion": "2023-12-01",
      "name": "[format('{0}-fa', parameters('resourcePrefix'))]",
      "location": "[resourceGroup().location]",
      "kind": "functionapp",
      "identity": {
        "type": "SystemAssigned"
      },
      "properties": {
        "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', format('{0}-hp', parameters('resourcePrefix')))]",
        "siteConfig": {
          "appSettings": [
            {
              "name": "AzureWebJobsStorage",
              "value": "[__bicep.connectionString(variables('storageAccountName'), listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName')), '2023-05-01'))]"
            },
            {
              "name": "WEBSITE_CONTENTAZUREFILECONNECTIONSTRING",
              "value": "[__bicep.connectionString(variables('storageAccountName'), listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName')), '2023-05-01'))]"
            },
            {
              "name": "ASSET_CONNECTIONSTRING",
              "value": "[__bicep.connectionString(variables('storageAccountName'), listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName')), '2023-05-01'))]"
            },
            {
              "name": "BICEP_ASSETS_VERSION",
              "value": "[parameters('version')]"
            },
            {
              "name": "WEBSITE_CONTENTSHARE",
              "value": "[toLower(format('{0}-fa', parameters('resourcePrefix')))]"
            },
            {
              "name": "FUNCTIONS_EXTENSION_VERSION",
              "value": "~4"
            },
            {
              "name": "WEBSITE_NODE_DEFAULT_VERSION",
              "value": "~20"
            },
            {
              "name": "APPINSIGHTS_INSTRUMENTATIONKEY",
              "value": "[reference('applicationInsights').InstrumentationKey]"
            },
            {
              "name": "FUNCTIONS_WORKER_RUNTIME",
              "value": "node"
            }
          ],
          "ftpsState": "FtpsOnly",
          "minTlsVersion": "1.2"
        },
        "httpsOnly": true
      },
      "dependsOn": [
        "applicationInsights",
        "assetStorage",
        "hostingPlan"
      ]
    },
    "assetDeploymentProvider": {
      "type": "Microsoft.CustomProviders/resourceProviders",
      "apiVersion": "2018-09-01-preview",
      "name": "[format('{0}-crp', parameters('resourcePrefix'))]",
      "location": "[resourceGroup().location]",
      "properties": {
        "resourceTypes": [
          {
            "name": "deploy-asset",
            "routingType": "Proxy,Cache",
            "endpoint": "[format('{0}/deploy-asset', variables('functionUrl'))]"
          },
          {
            "name": "associations",
            "routingType": "Proxy,Cache,Extension",
            "endpoint": "[format('{0}/associations', variables('functionUrl'))]"
          }
        ],
        "actions": [
          {
            "name": "listConfiguration",
            "routingType": "Proxy",
            "endpoint": "[format('{0}/config', variables('functionUrl'))]"
          },
          {
            "name": "uploadAssetsSas",
            "routingType": "Proxy",
            "endpoint": "[format('{0}/upload-assets-sas', variables('functionUrl'))]"
          }
        ]
      },
      "dependsOn": [
        "crpFunctionApp"
      ]
    },
    "logAnalyticsWorkspace": {
      "type": "Microsoft.OperationalInsights/workspaces",
      "apiVersion": "2023-09-01",
      "name": "[format('{0}-ws', parameters('resourcePrefix'))]",
      "location": "[resourceGroup().location]"
    },
    "applicationInsights": {
      "type": "Microsoft.Insights/components",
      "apiVersion": "2020-02-02",
      "name": "[format('{0}-ai', parameters('resourcePrefix'))]",
      "location": "[resourceGroup().location]",
      "kind": "web",
      "properties": {
        "Application_Type": "web",
        "publicNetworkAccessForIngestion": "Enabled",
        "publicNetworkAccessForQuery": "Enabled",
        "WorkspaceResourceId": "[resourceId('Microsoft.OperationalInsights/workspaces', format('{0}-ws', parameters('resourcePrefix')))]"
      },
      "dependsOn": [
        "logAnalyticsWorkspace"
      ]
    },
    "zipDeploy": {
      "condition": "[parameters('execZipDeploy')]",
      "type": "Microsoft.Web/sites/extensions",
      "apiVersion": "2023-12-01",
      "name": "[format('{0}/{1}', format('{0}-fa', parameters('resourcePrefix')), 'ZipDeploy')]",
      "properties": {
        "packageUri": "[format('https://{0}.blob.{1}/{2}/{3}?{4}', variables('storageAccountName'), environment().suffixes.storage, variables('zipDeployContainerName'), variables('zipDeployBlobName'), listAccountSas(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName')), '2023-05-01', createObject('signedProtocol', 'https', 'signedPermission', 'rl', 'signedResourceTypes', 'o', 'signedServices', 'b', 'signedExpiry', dateTimeAdd(parameters('baseTime'), 'PT1H'))).accountSasToken)]"
      },
      "dependsOn": [
        "assetStorage",
        "crpFunctionApp"
      ]
    }
  },
  "outputs": {
    "storageAccountName": {
      "type": "string",
      "value": "[variables('storageAccountName')]"
    },
    "resourceProviderId": {
      "type": "string",
      "value": "[resourceId('Microsoft.CustomProviders/resourceProviders', format('{0}-crp', parameters('resourcePrefix')))]"
    },
    "uploadCRPUrl": {
      "type": "string",
      "value": "[format('https://{0}.blob.{1}/{2}/{3}?{4}', variables('storageAccountName'), environment().suffixes.storage, variables('zipDeployContainerName'), variables('zipDeployBlobName'), listAccountSas(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName')), '2023-05-01', createObject('signedProtocol', 'https', 'signedPermission', 'wlacu', 'signedResourceTypes', 'sco', 'signedServices', 'b', 'signedExpiry', dateTimeAdd(parameters('baseTime'), 'PT1H'))).accountSasToken)]"
    }
  }
}